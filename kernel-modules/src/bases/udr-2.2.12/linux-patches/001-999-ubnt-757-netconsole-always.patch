If netconsole is enabled, all messages should be sent to it, regardless of console loglevel.

--- a/drivers/net/netconsole.c
+++ b/drivers/net/netconsole.c
@@ -1247,14 +1247,15 @@ static int __init init_netconsole(void)
 
 	err = dynamic_netconsole_init();
 	if (err)
 		goto undonotifier;
 
 	if (netconsole_ext.flags & CON_ENABLED)
 		register_console(&netconsole_ext);
+	netconsole.flags |= CON_ALWAYS;
 	register_console(&netconsole);
 	pr_info("network logging started\n");
 
 	return err;
 
 undonotifier:
 	unregister_netdevice_notifier(&netconsole_netdev_notifier);
--- a/include/linux/console.h
+++ b/include/linux/console.h
@@ -112,14 +112,15 @@ static inline int con_debug_leave(void)
 #define CON_PRINTBUFFER	(1)
 #define CON_CONSDEV	(2) /* Last on the command line */
 #define CON_ENABLED	(4)
 #define CON_BOOT	(8)
 #define CON_ANYTIME	(16) /* Safe to call when cpu is offline */
 #define CON_BRL		(32) /* Used for a braille device */
 #define CON_EXTENDED	(64) /* Use the extended output format a la /dev/kmsg */
+#define CON_ALWAYS	BIT(7) /* Ignore loglevel for this console */
 
 struct console {
 	char	name[16];
 	void	(*write)(struct console *, const char *, unsigned);
 	int	(*read)(struct console *, char *, unsigned);
 	struct tty_driver *(*device)(struct console *, int *);
 	void	(*unblank)(void);
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -1434,20 +1434,20 @@ static void call_console_drivers(int lev
 				 const char *ext_text, size_t ext_len,
 				 const char *text, size_t len)
 {
 	struct console *con;
 
 	trace_console_rcuidle(text, len);
 
-	if (level >= console_loglevel && !ignore_loglevel)
-		return;
 	if (!console_drivers)
 		return;
 
 	for_each_console(con) {
+		if (level >= console_loglevel && !(con->flags & CON_ALWAYS) && !ignore_loglevel)
+			continue;
 		if (exclusive_console && con != exclusive_console)
 			continue;
 		if (!(con->flags & CON_ENABLED))
 			continue;
 		if (!con->write)
 			continue;
 		if (!cpu_online(smp_processor_id()) &&
