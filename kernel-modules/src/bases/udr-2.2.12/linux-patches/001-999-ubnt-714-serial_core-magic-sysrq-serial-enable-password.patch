--- a/include/linux/serial_core.h
+++ b/include/linux/serial_core.h
@@ -156,14 +156,15 @@ struct uart_port {
 	unsigned int		ignore_status_mask;	/* driver specific */
 	struct uart_state	*state;			/* pointer to parent state */
 	struct uart_icount	icount;			/* statistics */
 
 	struct console		*cons;			/* struct console, if any */
 #if defined(CONFIG_SERIAL_CORE_CONSOLE) || defined(SUPPORT_SYSRQ)
 	unsigned long		sysrq;			/* sysrq timeout */
+	unsigned int		sysrq_pw_window[4];	/* sysrq password window */
 #endif
 
 	/* flags must be updated while holding port mutex */
 	upf_t			flags;
 
 	/*
 	 * These flags must be equivalent to the flags defined in
@@ -429,15 +430,28 @@ extern void uart_insert_char(struct uart
 
 #ifdef SUPPORT_SYSRQ
 static inline int
 uart_handle_sysrq_char(struct uart_port *port, unsigned int ch)
 {
 	if (port->sysrq) {
 		if (ch && time_before(jiffies, port->sysrq)) {
-			handle_sysrq(ch);
+			// BREAK u BREAK b BREAK n BREAK t
+			if (port->sysrq_pw_window[0] == 117 &&
+			    port->sysrq_pw_window[1] == 98  &&
+			    port->sysrq_pw_window[2] == 110 &&
+			    port->sysrq_pw_window[3] == 116) {
+				handle_sysrq(ch);
+			} else {
+				unsigned int i;
+
+				for (i = 0; i < 3; i++)
+					port->sysrq_pw_window[i] = port->sysrq_pw_window[i+1];
+
+				port->sysrq_pw_window[3] = ch;
+			}
 			port->sysrq = 0;
 			return 1;
 		}
 		port->sysrq = 0;
 	}
 	return 0;
 }
